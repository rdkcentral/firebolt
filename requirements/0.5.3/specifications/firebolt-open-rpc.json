{
	"openrpc": "1.2.4",
	"info": {
		"title": "Firebolt",
		"version": "0.5.3"
	},
	"methods": [
		{
			"name": "rpc.discover",
			"summary": "Firebolt OpenRPC schema",
			"params": [],
			"result": {
				"name": "OpenRPC Schema",
				"schema": {
					"type": "object"
				}
			}
		},
		{
			"name": "accessibility.closedCaptions",
			"summary": "Get the user's preferred closed-captions settings",
			"params": [],
			"result": {
				"name": "closedCaptionsSettings",
				"summary": "the closed captions settings",
				"schema": {
					"$ref": "#/components/schemas/ClosedCaptionsSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [],
					"result": {
						"name": "settings",
						"value": {
							"enabled": true,
							"styles": {
								"fontFamily": "Monospace sans-serif",
								"fontSize": 1,
								"fontColor": "#ffffff",
								"fontEdge": "none",
								"fontEdgeColor": "#7F7F7F",
								"fontOpacity": 100,
								"backgroundColor": "#000000",
								"backgroundOpacity": 100,
								"textAlign": "center",
								"textAlignVertical": "middle"
							}
						}
					}
				}
			]
		},
		{
			"name": "accessibility.onClosedCaptionsSettingsChanged",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Subscribe to notifications with the user's preferred closed-captions settings",
			"params": [],
			"result": {
				"name": "settings",
				"summary": "the closed captions settings",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/ClosedCaptionsSettings"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [],
					"result": {
						"name": "settings",
						"value": {
							"enabled": true,
							"styles": {
								"fontFamily": "Monospace sans-serif",
								"fontSize": 1,
								"fontColor": "#ffffff",
								"fontEdge": "none",
								"fontEdgeColor": "#7F7F7F",
								"fontOpacity": 100,
								"backgroundColor": "#000000",
								"backgroundOpacity": 100,
								"textAlign": "center",
								"textAlignVertical": "middle"
							}
						}
					}
				}
			]
		},
		{
			"name": "accessibility.voiceGuidance",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [],
			"result": {
				"name": "settings",
				"summary": "the voice guidance settings",
				"schema": {
					"$ref": "#/components/schemas/VoiceGuidanceSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true,
							"speed": 5
						}
					}
				}
			]
		},
		{
			"name": "accessibility.onVoiceGuidanceSettingsChanged",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Subscribe to notifications with the user's preferred voice guidance settings",
			"params": [],
			"result": {
				"name": "settings",
				"summary": "the voice guidance settings",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/VoiceGuidanceSettings"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true,
							"speed": 5
						}
					}
				}
			]
		},
		{
			"name": "account.id",
			"summary": "Get the platform back-office account identifier",
			"params": [],
			"result": {
				"name": "id",
				"summary": "the id",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "123"
					}
				}
			]
		},
		{
			"name": "account.uid",
			"summary": "Gets a unique id for the current app & account",
			"params": [],
			"result": {
				"name": "uniqueId",
				"summary": "a unique ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the unique ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "ee6723b8-7ab3-462c-8d93-dbf61227998e"
					}
				}
			]
		},
		{
			"name": "advertising.config",
			"summary": "Build configuration object for Ad Framework initialization",
			"params": [
				{
					"name": "options",
					"summary": "Configuration options",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/AdConfigurationOptions"
					}
				}
			],
			"result": {
				"name": "adFrameworkConfig",
				"summary": "the ad framework config",
				"schema": {
					"type": "object",
					"title": "AdConfiguration",
					"description": "An opaque object represneting the AdConfiguration"
				}
			},
			"examples": [
				{
					"name": "Initializing the Ad Framework",
					"params": [
						{
							"name": "options",
							"value": {
								"environment": "prod",
								"authenticationEntity": "MVPD"
							}
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"adServerUrl": "http://demo.v.fwmrm.net/ad/p/1",
							"adServerUrlTemplate": "http://demo.v.fwmrm.net/ad/p/1?flag=+sltp+exvt+slcb+emcr+amcb+aeti&prof=12345:caf_allinone_profile &nw=12345&mode=live&vdur=123&caid=a110523018&asnw=372464&csid=gmott_ios_tablet_watch_live_ESPNU&ssnw=372464&vip=198.205.92.1&resp=vmap1&metr=1031&pvrn=12345&vprn=12345&vcid=1X0Ce7L3xRWlTeNhc7br8Q%3D%3D",
							"adNetworkId": "519178",
							"adProfileId": "12345:caf_allinone_profile",
							"adSiteSectionId": "caf_allinone_profile_section",
							"adOptOut": true,
							"privacyData": "ew0KICAicGR0IjogImdkcDp2MSIsDQogICJ1c19wcml2YWN5IjogIjEtTi0iLA0KICAibG10IjogIjEiIA0KfQ0K",
							"ifaValue": "01234567-89AB-CDEF-GH01-23456789ABCD",
							"ifa": "ewogICJ2YWx1ZSI6ICIwMTIzNDU2Ny04OUFCLUNERUYtR0gwMS0yMzQ1Njc4OUFCQ0QiLAogICJpZmFfdHlwZSI6ICJzc3BpZCIsCiAgImxtdCI6ICIwIgp9Cg==",
							"appName": "FutureToday",
							"appBundleId": "FutureToday.comcast",
							"distributorAppId": "1001",
							"deviceAdAttributes": "ewogICJib0F0dHJpYnV0ZXNGb3JSZXZTaGFyZUlkIjogIjEyMzQiCn0=",
							"coppa": 0,
							"authenticationEntity": "60f72475281cfba3852413bd53e957f6"
						}
					}
				}
			]
		},
		{
			"name": "advertising.policy",
			"summary": "Get the advertising privacy and playback policy",
			"params": [],
			"result": {
				"name": "adPolicy",
				"summary": "the ad policy",
				"schema": {
					"$ref": "#/components/schemas/AdPolicy"
				}
			},
			"examples": [
				{
					"name": "Getting the advertising policy settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"skipRestriction": "adsUnwatched",
							"limitAdTracking": false
						}
					}
				}
			]
		},
		{
			"name": "advertising.advertisingId",
			"summary": "Get the advertising ID",
			"params": [],
			"result": {
				"name": "advertisingId",
				"summary": "the advertising ID",
				"schema": {
					"type": "object",
					"properties": {
						"ifa": {
							"type": "string"
						},
						"ifa_type": {
							"type": "string"
						},
						"lmt": {
							"type": "string"
						}
					},
					"required": [
						"ifa"
					]
				}
			},
			"examples": [
				{
					"name": "Getting the advertising ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"ifa": "01234567-89AB-CDEF-GH01-23456789ABCD",
							"ifa_type": "idfa",
							"lmt": "0"
						}
					}
				}
			]
		},
		{
			"name": "advertising.deviceAttributes",
			"summary": "Get the device advertising device attributes",
			"params": [],
			"result": {
				"name": "deviceAttributes",
				"summary": "the device attributes",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Getting the device attributes",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {}
					}
				}
			]
		},
		{
			"name": "advertising.appBundleId",
			"summary": "Get the App's Bundle ID",
			"params": [],
			"result": {
				"name": "appBundleId",
				"summary": "the app bundle ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "operator.app"
					}
				}
			]
		},
		{
			"name": "authentication.token",
			"summary": "Get a specific `type` of authentication token",
			"params": [
				{
					"name": "type",
					"summary": "What type of token to get",
					"schema": {
						"$ref": "#/components/schemas/TokenType"
					},
					"required": true
				},
				{
					"name": "options",
					"summary": "Additional options for acquiring the token.",
					"schema": {
						"type": "object"
					},
					"required": false
				}
			],
			"result": {
				"name": "token",
				"summary": "the token value, type, and expiration",
				"schema": {
					"type": "object",
					"properties": {
						"value": {
							"type": "string"
						},
						"expires": {
							"type": "string",
							"format": "date-time"
						},
						"type": {
							"type": "string"
						}
					},
					"required": [
						"value"
					]
				}
			},
			"examples": [
				{
					"name": "Acquire a Firebolt platform token",
					"params": [
						{
							"name": "type",
							"value": "platform"
						}
					],
					"result": {
						"name": "token",
						"value": {
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
							"expires": "2022-04-23T18:25:43.511Z",
							"type": "platform"
						}
					}
				},
				{
					"name": "Acquire a Firebolt device identity (XACT) token",
					"params": [
						{
							"name": "type",
							"value": "device"
						}
					],
					"result": {
						"name": "token",
						"value": {
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
							"expires": "2022-04-23T18:25:43.511Z",
							"type": "device"
						}
					}
				},
				{
					"name": "Acquire a Firebolt distributor token",
					"params": [
						{
							"name": "type",
							"value": "distributor"
						},
						{
							"name": "options",
							"value": {
								"clientId": "xyz"
							}
						}
					],
					"result": {
						"name": "token",
						"value": {
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
							"expires": "2022-04-23T18:25:43.511Z",
							"type": "distributor",
							"data": {
								"tid": "EB00E9230AB2A35F57DB4EFDDC4908F6446D38F08F4FF0BD57FE6A61E21EEFD9",
								"scope": "scope"
							}
						}
					}
				}
			]
		},
		{
			"name": "device.id",
			"summary": "Get the platform back-office device identifier",
			"params": [],
			"result": {
				"name": "id",
				"summary": "the id",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "123"
					}
				}
			]
		},
		{
			"name": "device.distributor",
			"summary": "Get the distributor ID for this device",
			"params": [],
			"result": {
				"name": "distributorId",
				"summary": "the distributor ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the distributor ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Company"
					}
				}
			]
		},
		{
			"name": "device.platform",
			"summary": "Get the platform ID for this device",
			"params": [],
			"result": {
				"name": "platformId",
				"summary": "the platform ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the platform ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "WPE"
					}
				}
			]
		},
		{
			"name": "device.uid",
			"summary": "Gets a unique id for the current app & device",
			"params": [],
			"result": {
				"name": "uniqueId",
				"summary": "a unique ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the unique ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "ee6723b8-7ab3-462c-8d93-dbf61227998e"
					}
				}
			]
		},
		{
			"name": "device.type",
			"summary": "Get the device type",
			"params": [],
			"result": {
				"name": "deviceType",
				"summary": "the device type",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device type",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "STB"
					}
				}
			]
		},
		{
			"name": "device.model",
			"summary": "Get the device model",
			"params": [],
			"result": {
				"name": "model",
				"summary": "the device model",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device model",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "xi6"
					}
				}
			]
		},
		{
			"name": "device.sku",
			"summary": "Get the device sku",
			"params": [],
			"result": {
				"name": "sku",
				"summary": "the device sku",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device sku",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "AX061AEI"
					}
				}
			]
		},
		{
			"name": "device.make",
			"summary": "Get the device make",
			"params": [],
			"result": {
				"name": "make",
				"summary": "the device make",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device make",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Arris"
					}
				}
			]
		},
		{
			"name": "device.version",
			"summary": "Get the SDK, OS and other version info",
			"tags": [
				{
					"name": "exclude-from-sdk"
				}
			],
			"params": [],
			"result": {
				"name": "versions",
				"summary": "the versions",
				"schema": {
					"type": "object",
					"properties": {
						"sdk": {
							"$ref": "#/components/schemas/SemanticVersion",
							"description": "The Firebolt SDK version"
						},
						"os": {
							"$ref": "#/components/schemas/SemanticVersion",
							"description": "The Firebolt OS version"
						},
						"debug": {
							"type": "string",
							"description": "Detail version as a string, for debugging purposes"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Getting the os and sdk versions",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"sdk": {
								"major": 0,
								"minor": 5,
								"patch": 0,
								"readable": "Firebolt JS SDK v0.5.0"
							},
							"os": {
								"major": 0,
								"minor": 1,
								"patch": 0,
								"readable": "Firebolt OS v0.1.0"
							},
							"debug": ""
						}
					}
				}
			]
		},
		{
			"name": "device.hdcp",
			"summary": "Get the supported HDCP profiles",
			"params": [],
			"result": {
				"name": "supportedHdcpProfiles",
				"summary": "the supported HDCP profiles",
				"schema": {
					"$ref": "#/components/schemas/BooleanMap"
				}
			},
			"examples": [
				{
					"name": "Getting the supported HDCP profiles",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"hdcp1.4": true,
							"hdcp2.2": true
						}
					}
				}
			]
		},
		{
			"name": "device.hdr",
			"summary": "Get the supported HDR profiles",
			"params": [],
			"result": {
				"name": "supportedHdrProfiles",
				"summary": "the supported HDR profiles",
				"schema": {
					"$ref": "#/components/schemas/BooleanMap"
				}
			},
			"examples": [
				{
					"name": "Getting the supported HDR profiles",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"hdr10": true,
							"hdr10Plus": true,
							"dolbyVision": true,
							"hlg": true
						}
					}
				}
			]
		},
		{
			"name": "device.audio",
			"summary": "Get the supported audio profiles",
			"params": [],
			"result": {
				"name": "supportedAudioProfiles",
				"summary": "the supported audio profiles",
				"schema": {
					"$ref": "#/components/schemas/AudioProfiles"
				}
			},
			"examples": [
				{
					"name": "Getting the supported audio profiles",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"stereo": true,
							"dolbyDigital5.1": true,
							"dolbyDigital5.1+": true,
							"dolbyAtmos": true
						}
					}
				}
			]
		},
		{
			"name": "device.screenResolution",
			"summary": "Get the current screen resolution",
			"params": [],
			"result": {
				"name": "screenResolution",
				"summary": "the resolution",
				"schema": {
					"$ref": "#/components/schemas/Resolution"
				}
			},
			"examples": [
				{
					"name": "Getting the screen resolution",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							1920,
							1080
						]
					}
				}
			]
		},
		{
			"name": "device.videoResolution",
			"summary": "Get the current video resolution",
			"params": [],
			"result": {
				"name": "videoResolution",
				"summary": "the resolution",
				"schema": {
					"$ref": "#/components/schemas/Resolution"
				}
			},
			"examples": [
				{
					"name": "Getting the video resolution",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							1920,
							1080
						]
					}
				}
			]
		},
		{
			"name": "device.name",
			"summary": "Get the human readable name of the device",
			"params": [],
			"result": {
				"name": "deviceName",
				"summary": "the device friendly-name",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device name",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "device.onDeviceNameChanged",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Get the human readable name of the device",
			"params": [],
			"result": {
				"name": "value",
				"summary": "the device friendly-name",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"type": "string"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Getting the device name",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "device.network",
			"summary": "Get the current network status and type",
			"params": [],
			"result": {
				"name": "networkInfo",
				"summary": "the status and type",
				"schema": {
					"type": "object",
					"properties": {
						"state": {
							"$ref": "#/components/schemas/NetworkState"
						},
						"type": {
							"$ref": "#/components/schemas/NetworkType"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Getting the network info",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"state": "connected",
							"type": "wifi"
						}
					}
				}
			]
		},
		{
			"name": "discovery.policy",
			"summary": "get the discovery policy",
			"params": [],
			"result": {
				"name": "policy",
				"summary": "discovery policy opt-in/outs",
				"schema": {
					"$ref": "#/components/schemas/DiscoveryPolicy"
				}
			},
			"examples": [
				{
					"name": "Getting the discovery policy",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enableRecommendations": true,
							"shareWatchHistory": true,
							"rememberWatchedPrograms": true
						}
					}
				}
			]
		},
		{
			"name": "discovery.onPolicyChanged",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Subscribe to notifications for discovery policy changes",
			"params": [],
			"result": {
				"name": "policy",
				"summary": "discovery policy opt-in/outs",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/DiscoveryPolicy"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Getting the discovery policy",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enableRecommendations": true,
							"shareWatchHistory": true,
							"rememberWatchedPrograms": true
						}
					}
				}
			]
		},
		{
			"name": "discovery.entityInfo",
			"tags": [
				{
					"name": "polymorphic-pull"
				}
			],
			"summary": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow.",
			"description": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow. Includes information about the program entity and its relevant associated entities, such as extras, previews, and, in the case of TV series, seasons and episodes.\n\nSee the `EntityInfo` and `WayToWatch` data structures below for more information.\n\nThe app only needs to implement Pull support for `entityInfo` at this time.",
			"params": [
				{
					"name": "data",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/EntityInfoResult"
					},
					"summary": "The entityInfo data."
				}
			],
			"result": {
				"name": "success",
				"summary": "True if the push operation is successful",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send entity info for a movie to the platform.",
					"params": [
						{
							"name": "data",
							"value": {
								"expires": "2025-01-01T00:00:00.000Z",
								"entity": {
									"identifiers": {
										"entityId": "345"
									},
									"entityType": "program",
									"programType": "movie",
									"title": "Cool Runnings",
									"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
									"releaseDate": "1993-01-01T00:00:00.000Z",
									"contentRatings": [
										{
											"scheme": "US-Movie",
											"rating": "PG"
										},
										{
											"scheme": "CA-Movie",
											"rating": "G"
										}
									],
									"waysToWatch": [
										{
											"identifiers": {
												"assetId": "123"
											},
											"expires": "2025-01-01T00:00:00.000Z",
											"entitled": true,
											"entitledExpires": "2025-01-01T00:00:00.000Z",
											"offeringType": "buy",
											"price": 2.99,
											"videoQuality": [
												"UHD"
											],
											"audioProfile": [
												"dolbyAtmos"
											],
											"audioLanguages": [
												"en"
											],
											"closedCaptions": [
												"en"
											],
											"subtitles": [
												"es"
											],
											"audioDescriptions": [
												"en"
											]
										}
									]
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send entity info for a movie with a trailer to the platform.",
					"params": [
						{
							"name": "data",
							"value": {
								"expires": "2025-01-01T00:00:00.000Z",
								"entity": {
									"identifiers": {
										"entityId": "345"
									},
									"entityType": "program",
									"programType": "movie",
									"title": "Cool Runnings",
									"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
									"releaseDate": "1993-01-01T00:00:00.000Z",
									"contentRatings": [
										{
											"scheme": "US-Movie",
											"rating": "PG"
										},
										{
											"scheme": "CA-Movie",
											"rating": "G"
										}
									],
									"waysToWatch": [
										{
											"identifiers": {
												"assetId": "123"
											},
											"expires": "2025-01-01T00:00:00.000Z",
											"entitled": true,
											"entitledExpires": "2025-01-01T00:00:00.000Z",
											"offeringType": "buy",
											"price": 2.99,
											"videoQuality": [
												"UHD"
											],
											"audioProfile": [
												"dolbyAtmos"
											],
											"audioLanguages": [
												"en"
											],
											"closedCaptions": [
												"en"
											],
											"subtitles": [
												"es"
											],
											"audioDescriptions": [
												"en"
											]
										}
									]
								},
								"related": [
									{
										"identifiers": {
											"entityId": "345"
										},
										"entityType": "program",
										"programType": "preview",
										"title": "Cool Runnings Trailer",
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "123111",
													"entityId": "345"
												},
												"entitled": true,
												"videoQuality": [
													"HD"
												],
												"audioProfile": [
													"dolbyAtmos"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									}
								]
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send entity info for a TV Series with seasons and episodes to the platform.",
					"params": [
						{
							"name": "data",
							"value": {
								"expires": "2025-01-01T00:00:00.000Z",
								"entity": {
									"identifiers": {
										"entityId": "98765"
									},
									"entityType": "program",
									"programType": "series",
									"title": "Perfect Strangers",
									"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
									"releaseDate": "1986-01-01T00:00:00.000Z",
									"contentRatings": [
										{
											"scheme": "US-TV",
											"rating": "TV-PG"
										}
									]
								},
								"related": [
									{
										"identifiers": {
											"entityId": "111",
											"seriesId": "98765"
										},
										"entityType": "program",
										"programType": "season",
										"seasonNumber": 1,
										"title": "Perfect Strangers Season 3",
										"contentRatings": [
											{
												"scheme": "US-TV",
												"rating": "TV-PG"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "556",
													"entityId": "111",
													"seriesId": "98765"
												},
												"entitled": true,
												"offeringType": "free",
												"videoQuality": [
													"SD"
												],
												"audioProfile": [
													"stereo"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									},
									{
										"identifiers": {
											"entityId": "111",
											"seriesId": "98765"
										},
										"entityType": "program",
										"programType": "episode",
										"seasonNumber": 1,
										"episodeNumber": 1,
										"title": "Knock Knock, Who's There?",
										"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
										"releaseDate": "1986-03-25T00:00:00.000Z",
										"contentRatings": [
											{
												"scheme": "US-TV",
												"rating": "TV-PG"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "556",
													"entityId": "111",
													"seriesId": "98765"
												},
												"entitled": true,
												"offeringType": "free",
												"videoQuality": [
													"SD"
												],
												"audioProfile": [
													"stereo"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									},
									{
										"identifiers": {
											"entityId": "112",
											"seriesId": "98765"
										},
										"entityType": "program",
										"programType": "episode",
										"seasonNumber": 1,
										"episodeNumber": 2,
										"title": "Picture This",
										"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
										"releaseDate": "1986-04-01T00:00:00.000Z",
										"contentRatings": [
											{
												"scheme": "US-TV",
												"rating": "TV-PG"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "557",
													"entityId": "112",
													"seriesId": "98765"
												},
												"entitled": true,
												"offeringType": "free",
												"videoQuality": [
													"SD"
												],
												"audioProfile": [
													"stereo"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									}
								]
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "discovery.purchasedContent",
			"tags": [
				{
					"name": "polymorphic-pull"
				}
			],
			"summary": "Provide a list of purchased content for the authenticated account, such as rentals and electronic sell through purchases.",
			"params": [
				{
					"name": "data",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/PurchasedContentResult"
					},
					"summary": "The data for the purachasedContent"
				}
			],
			"result": {
				"name": "success",
				"summary": "True if the push operation is successful",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Inform the platform of the user's purchased content",
					"params": [
						{
							"name": "data",
							"value": {
								"totalCount": 10,
								"expires": "2025-01-01T00:00:00.000Z",
								"entries": [
									{
										"identifiers": {
											"entityId": "345"
										},
										"entityType": "program",
										"programType": "movie",
										"title": "Cool Runnings",
										"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
										"releaseDate": "1993-01-01T00:00:00.000Z",
										"contentRatings": [
											{
												"scheme": "US-Movie",
												"rating": "PG"
											},
											{
												"scheme": "CA-Movie",
												"rating": "G"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "123"
												},
												"expires": "2025-01-01T00:00:00.000Z",
												"entitled": true,
												"entitledExpires": "2025-01-01T00:00:00.000Z",
												"offeringType": "buy",
												"price": 2.99,
												"videoQuality": [
													"UHD"
												],
												"audioProfile": [
													"dolbyAtmos"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												],
												"subtitles": [
													"es"
												],
												"audioDescriptions": [
													"en"
												]
											}
										]
									}
								]
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			],
			"description": "Return content purchased by the user, such as rentals and electronic sell through purchases.\n\nThe app should return the user's 100 most recent purchases in `entries`. The total count of purchases must be provided in `count`. If `count` is greater than the total number of `entries`, the UI may provide a link into the app to see the complete purchase list.\n\nThe `EntityInfo` object returned is not required to have `waysToWatch` populated, but it is recommended that it do so in case the UI wants to surface additional information on the purchases screen.\n\nThe app should implement both Push and Pull methods for `purchasedContent`.\n\nThe app should actively push `purchasedContent` when:\n\n*  The app becomes Active.\n*  When the state of the purchasedContent set has changed.\n*  The app goes into Inactive or Background state, if there is a chance a change event has been missed."
		},
		{
			"name": "discovery.watched",
			"summary": "Notify the platform that content was partially or completely watched",
			"tags": [
				{
					"name": "polymorphic-reducer"
				}
			],
			"params": [
				{
					"name": "entityId",
					"required": true,
					"schema": {
						"type": "string"
					},
					"summary": "The entity Id of the watched content."
				},
				{
					"name": "progress",
					"summary": "How much of the content has been watched (percentage as 0-1 for VOD, number of seconds for live)",
					"schema": {
						"type": "number",
						"minimum": 0
					}
				},
				{
					"name": "completed",
					"summary": "Whether or not this viewing is considered \"complete,\" per the app's definition thereof",
					"schema": {
						"type": "boolean"
					}
				},
				{
					"name": "watchedOn",
					"summary": "Date/Time the content was watched, ISO 8601 Date/Time",
					"schema": {
						"type": "string",
						"format": "date-time"
					}
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Notifying the platform of watched content",
					"params": [
						{
							"name": "entityId",
							"value": "partner.com/entity/123"
						},
						{
							"name": "progress",
							"value": 0.95
						},
						{
							"name": "completed",
							"value": true
						},
						{
							"name": "watchedOn",
							"value": "2021-04-23T18:25:43.511Z"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "discovery.watchNext",
			"summary": "Suggest a call-to-action for this app on the platform home screen",
			"params": [
				{
					"name": "title",
					"summary": "The title of this call to action",
					"schema": {
						"$ref": "#/components/schemas/LocalizedString"
					}
				},
				{
					"name": "identifiers",
					"summary": "A set of content identifiers for this call to action",
					"schema": {
						"$ref": "#/components/schemas/ContentIdentifiers"
					}
				},
				{
					"name": "expires",
					"summary": "When this call to action should no longer be presented to users",
					"schema": {
						"type": "string",
						"format": "date-time"
					}
				},
				{
					"name": "images",
					"summary": "A set of images for this call to action",
					"schema": {
						"type": "object",
						"patternProperties": {
							"^.*$": {
								"$ref": "#/components/schemas/LocalizedString"
							}
						}
					}
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Suggest a watch-next tile for the home screen",
					"params": [
						{
							"name": "title",
							"value": "A Cool Show"
						},
						{
							"name": "identifiers",
							"value": {
								"entityId": "partner.com/entity/123"
							}
						},
						{
							"name": "expires",
							"value": "2021-04-23T18:25:43.511Z"
						},
						{
							"name": "images",
							"value": {
								"3x4": {
									"en-US": "https://i.ytimg.com/vi/4r7wHMg5Yjg/maxresdefault.jpg",
									"es": "https://i.ytimg.com/vi/4r7wHMg5Yjg/maxresdefault.jpg"
								},
								"16x9": {
									"en": "https://i.ytimg.com/vi/4r7wHMg5Yjg/maxresdefault.jpg"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "discovery.entitlements",
			"summary": "Inform the platform of the users latest entitlements w/in this app",
			"params": [
				{
					"name": "entitlements",
					"summary": "Array of entitlement objects",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Entitlement"
						}
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Update user's entitlements",
					"params": [
						{
							"name": "entitlements",
							"value": [
								{
									"entitlementId": "partner.com/entitlement/123",
									"startTime": "2021-04-23T18:25:43.511Z",
									"endTime": "2021-04-23T18:25:43.511Z"
								},
								{
									"entitlementId": "partner.com/entitlement/456",
									"startTime": "2021-04-23T18:25:43.511Z",
									"endTime": "2021-04-23T18:25:43.511Z"
								}
							]
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "discovery.launch",
			"summary": "Launch or foreground the specified app, and optionally instructs it to navigate to the specified user action",
			"params": [
				{
					"name": "appId",
					"required": true,
					"summary": "The durable app Id of the app to launch",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "intent",
					"required": false,
					"summary": "An optional `NavigationIntent` with details about what part of the app to show first, and context around how/why it was launched",
					"schema": {
						"$ref": "#/components/schemas/NavigationIntent"
					}
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Launch the 'Foo' app to it's home screen.",
					"params": [
						{
							"name": "appId",
							"value": "foo"
						},
						{
							"name": "intent",
							"value": {
								"action": "home",
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the 'Foo' app to it's own page for a specific entity.",
					"params": [
						{
							"name": "appId",
							"value": "foo"
						},
						{
							"name": "intent",
							"value": {
								"action": "entity",
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "example-movie-id"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the 'Foo' app to a fullscreen playback experience for a specific entity.",
					"params": [
						{
							"name": "appId",
							"value": "foo"
						},
						{
							"name": "intent",
							"value": {
								"action": "playback",
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "example-movie-id"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to a global page for a specific entity.",
					"params": [
						{
							"name": "appId",
							"value": "urn:firebolt:apps:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "entity",
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "example-movie-id"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to a global page for the company / partner with the ID 'foo'.",
					"params": [
						{
							"name": "appId",
							"value": "urn:firebolt:apps:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "company:foo"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's home screen, as if the Home remote button was pressed.",
					"params": [
						{
							"name": "appId",
							"value": "urn:firebolt:apps:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "home",
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's search screen.",
					"params": [
						{
							"name": "appId",
							"value": "urn:firebolt:apps:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "search",
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's settings screen.",
					"params": [
						{
							"name": "appId",
							"value": "urn:firebolt:apps:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "settings"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's linear/epg guide.",
					"params": [
						{
							"name": "appId",
							"value": "urn:firebolt:apps:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "guide"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to the App Store details page for a specfic app with the ID 'foo'.",
					"params": [
						{
							"name": "appId",
							"value": "urn:firebolt:apps:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "app:foo"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "discovery.onNavigateTo",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "listen to `navigateTo` events",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "An object describing where in the app the user intends to navigate to",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/NavigationIntent"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Listening for `navigateTo` events",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "event",
						"value": {
							"action": "search",
							"data": {
								"query": "a cool show"
							},
							"context": {
								"campaign": "unknown",
								"source": "voice"
							}
						}
					}
				}
			]
		},
		{
			"name": "discovery.onPullEntityInfo",
			"tags": [
				{
					"name": "event"
				},
				{
					"name": "rpc-only"
				}
			],
			"summary": "listen to `entityInfo` pull events",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/EntityInfoFederatedRequest"
						}
					]
				},
				"summary": "The parameters for the pull request"
			},
			"examples": [
				{
					"name": "Platform requests entity `abc`",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "request",
						"value": {
							"correlationId": "xyz",
							"parameters": {
								"entityId": "abc"
							}
						}
					}
				}
			]
		},
		{
			"name": "discovery.onPullPurchasedContent",
			"tags": [
				{
					"name": "event"
				},
				{
					"name": "rpc-only"
				}
			],
			"summary": "listen to `pullPurchaseContent` events",
			"params": [
				{
					"name": "listen",
					"required": true,
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/ListenResponse"
						},
						{
							"$ref": "#/components/schemas/PurchasedContentFederatedRequest"
						}
					]
				},
				"summary": "The parameters for the pull request"
			},
			"examples": [
				{
					"name": "Platform requests purchased content from app",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "request",
						"value": {
							"correlationId": "xyz",
							"parameters": {
								"limit": 100
							}
						}
					}
				}
			]
		},
		{
			"name": "discovery.signIn",
			"tags": [
				{
					"name": "calls-metrics"
				}
			],
			"summary": "Inform the platform that your user is signed in, for increased visiblity in search & discovery.",
			"params": [
				{
					"name": "entitlements",
					"summary": "Optional array of Entitlements, in case of a different user account, or a long time since last sign-in.",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Entitlement"
						}
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signIn metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send signIn notification with entitlements",
					"params": [
						{
							"name": "entitlements",
							"value": [
								{
									"entitlementId": "123",
									"startTime": "2025-01-01T00:00:00.000Z",
									"endTime": "2025-01-01T00:00:00.000Z"
								}
							]
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "discovery.signOut",
			"tags": [
				{
					"name": "calls-metrics"
				}
			],
			"summary": "Inform the platform that your user has signed out and that entitlements may no longer be valid.",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signOut notification",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "internal.initialize",
			"tags": [
				{
					"name": "rpc-only"
				}
			],
			"summary": "Initialize the SDK / FEE session.",
			"description": "A single version of the Firebolt SDK is compiled into each app. When an app starts up, the SDK **MUST** call this method as soon as possible and **before** any other JSON-RPC methods are sent.",
			"params": [
				{
					"name": "version",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/SemanticVersion"
					},
					"summary": "The semantic version of the SDK."
				}
			],
			"result": {
				"name": "session",
				"summary": "Info about the SDK/FEE session",
				"schema": {
					"type": "object",
					"required": [
						"version"
					],
					"properties": {
						"version": {
							"$ref": "#/components/schemas/SemanticVersion",
							"description": "The semantic version of the FEE."
						}
					},
					"additionalProperties": false
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "version",
							"value": {
								"major": 1,
								"minor": 0,
								"patch": 0,
								"readable": "Firebolt SDK 1.0.0"
							}
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"version": {
								"major": 1,
								"minor": 0,
								"patch": 0,
								"readable": "Firebolt FEE 1.0.0"
							}
						}
					}
				}
			]
		},
		{
			"name": "keyboard.email",
			"summary": "Prompt the user for their email address with a simplified list of choices.",
			"params": [
				{
					"name": "type",
					"summary": "Why the email is being requested, e.g. sign on or sign up",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/EmailUsage"
					}
				},
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "email",
				"summary": "the selected or entered email",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user to select or type an email address",
					"params": [
						{
							"name": "type",
							"value": "signIn"
						},
						{
							"name": "message",
							"value": "Enter your email to sign into this app"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "user@domain.com"
					}
				},
				{
					"name": "Prompt the user to type an email address to sign up",
					"params": [
						{
							"name": "type",
							"value": "signUp"
						},
						{
							"name": "message",
							"value": "Enter your email to sign up for this app"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "user@domain.com"
					}
				}
			]
		},
		{
			"name": "keyboard.password",
			"summary": "Show the password entry keyboard, with typing obfuscated from visibility",
			"params": [
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "the selected or entered password",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user to enter their password",
					"params": [
						{
							"name": "message",
							"value": "Enter your password"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "abc123"
					}
				}
			]
		},
		{
			"name": "keyboard.standard",
			"summary": "Show the standard platform keyboard, and return the submitted value",
			"params": [
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": true,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "the selected or entered text",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user for an arbitrary string",
					"params": [
						{
							"name": "message",
							"value": "Enter the name you'd like to associate with this device"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "lifecycle.ready",
			"tags": [
				{
					"name": "calls-metrics"
				}
			],
			"summary": "Notify the platform that the app is ready",
			"params": [],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Let the platform know that your app is ready",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "lifecycle.close",
			"summary": "Request that the platform move your app out of focus",
			"params": [
				{
					"name": "reason",
					"summary": "The reason the app is requesting to be closed",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/CloseReason"
					}
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Close the app when the user presses back on the app home screen",
					"params": [
						{
							"name": "reason",
							"value": "remoteButton"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				},
				{
					"name": "Close the app when the user selects an exit menu item",
					"params": [
						{
							"name": "reason",
							"value": "userExit"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "lifecycle.finished",
			"tags": [
				{
					"name": "exclude-from-sdk"
				}
			],
			"summary": "Notify the platform that the app is done unloading",
			"params": [],
			"result": {
				"name": "results",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "lifecycle.state",
			"summary": "Get the current state of the app. This function is **synchronous**.",
			"tags": [
				{
					"name": "synchronous"
				},
				{
					"name": "exclude-from-sdk"
				}
			],
			"params": [],
			"result": {
				"name": "state",
				"summary": "the current state of the app.",
				"schema": {
					"$ref": "#/components/schemas/LifecycleState"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "foreground"
					}
				}
			]
		},
		{
			"name": "lifecycle.onInactive",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Listen to the inactive event",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "value",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/LifecycleEvent"
						},
						{
							"$ref": "#/components/schemas/ListenResponse"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"state": "inactive",
							"previous": "initializing"
						}
					}
				}
			]
		},
		{
			"name": "lifecycle.onForeground",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Listen to the foreground event",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "value",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/LifecycleEvent"
						},
						{
							"$ref": "#/components/schemas/ListenResponse"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"state": "foreground",
							"previous": "inactive"
						}
					}
				},
				{
					"name": "Move to foreground via remote branded buton",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "value",
						"value": {
							"state": "foreground",
							"previous": "inactive",
							"source": "remote"
						}
					}
				}
			]
		},
		{
			"name": "lifecycle.onBackground",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Listen to the background event",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "value",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/LifecycleEvent"
						},
						{
							"$ref": "#/components/schemas/ListenResponse"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"state": "background",
							"previous": "foreground"
						}
					}
				}
			]
		},
		{
			"name": "lifecycle.onSuspended",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Listen to the suspended event",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "value",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/LifecycleEvent"
						},
						{
							"$ref": "#/components/schemas/ListenResponse"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"state": "suspended",
							"previous": "inactive"
						}
					}
				}
			]
		},
		{
			"name": "lifecycle.onUnloading",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Listen to the unloading event",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "value",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/LifecycleEvent"
						},
						{
							"$ref": "#/components/schemas/ListenResponse"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"state": "unloading",
							"previous": "inactive"
						}
					}
				}
			]
		},
		{
			"name": "localization.locality",
			"summary": "Get the locality/city the device is located in",
			"params": [],
			"result": {
				"name": "locality",
				"summary": "the device city",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Philadelphia"
					}
				}
			]
		},
		{
			"name": "localization.postalCode",
			"summary": "Get the postal code the device is located in",
			"params": [],
			"result": {
				"name": "postalCode",
				"summary": "the device postal code",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "19103"
					}
				}
			]
		},
		{
			"name": "localization.countryCode",
			"summary": "Get the ISO 3166 code for the counrty device is located in",
			"params": [],
			"result": {
				"name": "code",
				"summary": "the device country code",
				"schema": {
					"type": "string",
					"minLength": 2,
					"maxLength": 3
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "US"
					}
				}
			]
		},
		{
			"name": "localization.language",
			"summary": "Get the ISO 639 1/2 code for the preferred language",
			"params": [],
			"result": {
				"name": "lang",
				"summary": "the device language",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "en"
					}
				}
			]
		},
		{
			"name": "localization.locale",
			"summary": "Get the *full* BCP 47 code, including script, region, variant, etc., for the preferred langauage/locale",
			"params": [],
			"result": {
				"name": "locale",
				"summary": "the device locale",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "en-US"
					}
				}
			]
		},
		{
			"name": "localization.latlon",
			"summary": "Get the approximate latitude and longitude coordinates of the device location",
			"params": [],
			"result": {
				"name": "latlong",
				"summary": "lat/long tuple",
				"schema": {
					"$ref": "#/components/schemas/LatLon"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							39.9549,
							75.1699
						]
					}
				}
			]
		},
		{
			"name": "localization.additionalInfo",
			"summary": "Get any platform-specific localization information, in an Map<string, string>",
			"params": [],
			"result": {
				"name": "info",
				"summary": "the additional info",
				"schema": {
					"type": "object",
					"additionalProperties": {
						"type": "string",
						"maxLength": 1024
					},
					"maxProperties": 32
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "info",
						"value": {}
					}
				}
			]
		},
		{
			"name": "metrics.ready",
			"tags": [
				{
					"name": "rpc-only"
				}
			],
			"summary": "Inform the platform that your app is minimally usable. This method is called automatically by `Lifecycle.ready()`",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send ready metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.signIn",
			"tags": [
				{
					"name": "rpc-only"
				}
			],
			"summary": "Log a sign in event, called by Discovery.signIn().",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signIn metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send signIn metric with entitlements",
					"params": [
						{
							"name": "entitlements",
							"value": [
								{
									"entitlementId": "123",
									"startTime": "2025-01-01T00:00:00.000Z",
									"endTime": "2025-01-01T00:00:00.000Z"
								}
							]
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.signOut",
			"tags": [
				{
					"name": "rpc-only"
				}
			],
			"summary": "Log a sign out event, called by Discovery.signOut().",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signOut metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.startContent",
			"summary": "Inform the platform that your user has started content.",
			"params": [
				{
					"name": "entityId",
					"summary": "Optional entity ID of the content.",
					"schema": {
						"type": "string"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send startContent metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send startContent metric w/ entity",
					"params": [
						{
							"name": "entityId",
							"value": "abc"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.stopContent",
			"summary": "Inform the platform that your user has stopped content.",
			"params": [
				{
					"name": "entityId",
					"summary": "Optional entity ID of the content.",
					"schema": {
						"type": "string"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send stopContent metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send stopContent metric w/ entity",
					"params": [
						{
							"name": "entityId",
							"value": "abc"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.page",
			"summary": "Inform the platform that your user has navigated to a page or view.",
			"params": [
				{
					"name": "pageId",
					"summary": "Page ID of the content.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send page metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send startContent metric w/ entity",
					"params": [
						{
							"name": "pageId",
							"value": "home"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.action",
			"summary": "Inform the platform of something not covered by other Metrics APIs.",
			"params": [
				{
					"name": "category",
					"summary": "The category of action being logged. Must be 'user' for user-initated actions or 'app' for all other actions",
					"schema": {
						"type": "string",
						"enum": [
							"user",
							"app"
						]
					},
					"required": true
				},
				{
					"name": "type",
					"summary": "A short, indexible identifier for the action, e.g. 'SignIn Prompt Displayed'",
					"schema": {
						"type": "string",
						"maxLength": 256
					},
					"required": true
				},
				{
					"name": "parameters",
					"schema": {
						"$ref": "#/components/schemas/FlatMap"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send page metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send startContent metric w/ entity",
					"params": [
						{
							"name": "pageId",
							"value": "home"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.error",
			"summary": "Inform the platform of an error that has occured in your app.",
			"params": [
				{
					"name": "type",
					"summary": "The type of error",
					"schema": {
						"$ref": "#/components/schemas/ErrorType"
					},
					"required": true
				},
				{
					"name": "code",
					"summary": "an app-specific error code",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "description",
					"summary": "A short description of the error",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "visible",
					"summary": "Whether or not this error was visible to the user.",
					"schema": {
						"type": "boolean"
					},
					"required": true
				},
				{
					"name": "parameters",
					"summary": "Optional additional parameters to be logged with the error",
					"schema": {
						"$ref": "#/components/schemas/FlatMap"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send error metric",
					"params": [
						{
							"name": "type",
							"value": "media"
						},
						{
							"name": "code",
							"value": "MEDIA-STALLED"
						},
						{
							"name": "description",
							"value": "playback stalled"
						},
						{
							"name": "visible",
							"value": true
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaLoadStart",
			"summary": "Called when setting the URL of a media asset to play, in order to infer load time.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send loadstart metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaPlay",
			"summary": "Called when media playback should start due to autoplay, user-initiated play, or unpausing.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send play metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaPlaying",
			"summary": "Called when media playback actually starts due to autoplay, user-initiated play, unpausing, or recovering from a buffering interuption.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send playing metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaPause",
			"summary": "Called when media playback will pause due to an intentional pause operation.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send pause metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaWaiting",
			"summary": "Called when media playback will halt due to a network, buffer, or other unintentional constraint.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send waiting metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaProgress",
			"summary": "Called every 60 seconds as media playback progresses.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "progress",
					"summary": "Progress of playback, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
					"schema": {
						"$ref": "#/components/schemas/MediaPosition"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send progress metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "progress",
							"value": 0.75
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaSeeking",
			"summary": "Called when a seek is initiated during media playback.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "target",
					"summary": "Target destination of the seek, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
					"schema": {
						"$ref": "#/components/schemas/MediaPosition"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send seeking metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "target",
							"value": 0.5
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaSeeked",
			"summary": "Called when a seek is completed during media playback.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "position",
					"summary": "Resulting position of the seek operation, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
					"schema": {
						"$ref": "#/components/schemas/MediaPosition"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send seeked metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "position",
							"value": 0.51
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaRateChange",
			"summary": "Called when the playback rate of media is changed.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "rate",
					"summary": "The new playback rate.",
					"schema": {
						"type": "number"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send ratechange metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "rate",
							"value": 2
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaRenditionChange",
			"summary": "Called when the playback rendition (e.g. bitrate, dimensions, profile, etc) is changed.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "bitrate",
					"summary": "The new bitrate in kbps.",
					"schema": {
						"type": "number"
					},
					"required": true
				},
				{
					"name": "width",
					"summary": "The new resolution width.",
					"schema": {
						"type": "number"
					},
					"required": true
				},
				{
					"name": "height",
					"summary": "The new resolution height.",
					"schema": {
						"type": "number"
					},
					"required": true
				},
				{
					"name": "profile",
					"summary": "A description of the new profile, e.g. 'HDR' etc.",
					"schema": {
						"type": "string"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send renditionchange metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "bitrate",
							"value": 5000
						},
						{
							"name": "width",
							"value": 1920
						},
						{
							"name": "height",
							"value": 1080
						},
						{
							"name": "profile",
							"value": "HDR+"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "metrics.mediaEnded",
			"summary": "Called when playback has stopped because the end of the media was reached.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send ended metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "parameters.initialization",
			"summary": "Returns any initialization parameters for the app, e.g. initialial `NavigationIntent`.",
			"params": [],
			"result": {
				"name": "init",
				"summary": "The initialization parameters.",
				"schema": {
					"$ref": "#/components/schemas/AppInitialization"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "init",
						"value": {
							"lmt": 0,
							"us_privacy": "1-Y-",
							"discovery": {
								"navigateTo": {
									"action": "entity",
									"data": {
										"entityId": "abc"
									},
									"context": {
										"source": "voice"
									}
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "profile.approveContentRating",
			"summary": "Verifies that the current profile should have access to mature/adult content.",
			"params": [],
			"result": {
				"name": "allow",
				"summary": "Whether or not to allow access",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": false
					}
				}
			]
		},
		{
			"name": "profile.approvePurchase",
			"summary": "Verifies that the current profile should have access to making purchases.",
			"params": [],
			"result": {
				"name": "allow",
				"summary": "Whether or not to allow access",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": false
					}
				}
			]
		},
		{
			"name": "profile.flags",
			"summary": "Get a map of profile flags for the current session.",
			"params": [],
			"result": {
				"name": "flags",
				"summary": "The profile flags.",
				"schema": {
					"$ref": "#/components/schemas/FlatMap"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "flags",
						"value": {
							"userExperience": "1000"
						}
					}
				}
			]
		},
		{
			"name": "secondscreen.protocols",
			"summary": "Get the supported second screen discovery protocols",
			"params": [],
			"result": {
				"name": "protocols",
				"summary": "the supported protocols",
				"schema": {
					"$ref": "#/components/schemas/BooleanMap"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"dial1.7": true
						}
					}
				}
			]
		},
		{
			"name": "secondscreen.device",
			"summary": "Get the broadcasted id for the device",
			"params": [
				{
					"name": "type",
					"summary": "The type of second screen protocol, e.g. \"dial\"",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "deviceId",
				"summary": "the device id",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "device-id"
					}
				}
			]
		},
		{
			"name": "secondscreen.friendlyName",
			"summary": "Get the broadcasted friendly name for the device",
			"params": [
				{
					"name": "type",
					"summary": "The type of second screen protocol, e.g. \"dial\"",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "friendlyName",
				"summary": "the device friendly-name",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "friendlyName",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "secondscreen.onLaunchRequest",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Listen to the launchRequest event",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "launchRequestEvent",
				"summary": "Dispatched when a second screen device on the local network has requested this app to be launched",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/SecondScreenEvent"
						},
						{
							"$ref": "#/components/schemas/ListenResponse"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"type": "dial",
							"version": "1.7",
							"data": "{\"code\":\"AQDPQZiQcb3KQ7gY7yy5tHTMbbkGHR9Zjp-KL53H3eKBZIeAt7O9UKYPu6B21l2UZVmIqkFXDXBmXvK4g2e3EgZtjMNmKPsTltgnRl95DImtOXjSpWtTjSaOkW4w1kZKUTwLKdwVWTzBVH8ERHorvLU6vCGOVHxXt65LNwdl5HKRweShVC1V9QsyvRnQS61ov0UclmrH_xZML2Bt-Q-rZFjey5MjwupIb4x4f53XUJMhjHpDHoIUKrjpdPDQvK2a\",\"friendlyName\":\"Operator_TX061AEI\",\"UDN\":\"608fef11-2800-482a-962b-23a6690c93c1\"}"
						}
					}
				}
			]
		},
		{
			"name": "secondscreen.onCloseRequest",
			"tags": [
				{
					"name": "event"
				}
			],
			"summary": "Listen to the closeRequest event",
			"params": [
				{
					"name": "listen",
					"required": true,
					"summary": "whether to listen, or stop listening",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "closeRequestEvent",
				"schema": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/SecondScreenEvent"
						},
						{
							"$ref": "#/components/schemas/ListenResponse"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"type": "dial",
							"version": "1.7"
						}
					}
				}
			]
		}
	],
	"components": {
		"schemas": {
			"ClosedCaptionsStyles": {
				"title": "ClosedCaptionsStyles",
				"type": "object",
				"description": "The default styles to use when displaying closed-captions",
				"properties": {
					"fontFamily": {
						"type": "string"
					},
					"fontSize": {
						"type": "number",
						"minimum": 0
					},
					"fontColor": {
						"type": "string"
					},
					"fontEdge": {
						"type": "string"
					},
					"fontEdgeColor": {
						"type": "string"
					},
					"fontOpacity": {
						"type": "number",
						"minimum": 0,
						"maximum": 100
					},
					"backgroundColor": {
						"type": "string"
					},
					"backgroundOpacity": {
						"type": "number",
						"minimum": 0,
						"maximum": 100
					},
					"textAlign": {
						"type": "string"
					},
					"textAlignVertical": {
						"type": "string"
					}
				}
			},
			"ClosedCaptionsSettings": {
				"title": "ClosedCaptionsSettings",
				"type": "object",
				"required": [
					"enabled",
					"styles"
				],
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether or not closed-captions should be enabled by default"
					},
					"styles": {
						"$ref": "#/components/schemas/ClosedCaptionsStyles"
					}
				}
			},
			"VoiceGuidanceSettings": {
				"title": "VoiceGuidanceSettings",
				"type": "object",
				"required": [
					"enabled",
					"speed"
				],
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether or not voice guidance should be enabled by default"
					},
					"speed": {
						"type": "number",
						"description": "The speed at which voice guidance speech will be read back to the user"
					}
				}
			},
			"ListenResponse": {
				"title": "ListenResponse",
				"type": "object",
				"required": [
					"event",
					"listening"
				],
				"properties": {
					"event": {
						"type": "string",
						"pattern": "[a-zA-Z]+\\.on[A-Z][a-zA-Z]+"
					},
					"listening": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"AdPolicy": {
				"title": "AdPolicy",
				"description": "Describes various ad playback enforcement rules that the app should follow.",
				"type": "object",
				"properties": {
					"skipRestriction": {
						"$ref": "#/components/schemas/SkipRestriction"
					},
					"limitAdTracking": {
						"type": "boolean"
					}
				}
			},
			"SkipRestriction": {
				"title": "SkipRestriction",
				"$comment": "xrn:advertising:policy:skipRestriction:",
				"type": "string",
				"enum": [
					"none",
					"adsUnwatched",
					"adsAll",
					"all"
				],
				"description": "The advertisement skip restriction.\n\nApplies to fast-forward/rewind (e.g. trick mode), seeking over an entire opportunity (e.g. jump), seeking out of what's currently playing, and \"Skip this ad...\" features. Seeking over multiple ad opportunities only requires playback of the _last_ opportunity, not all opportunities, preceding the seek destination.\n\n| Value        | Description                                                                    |\n|--------------|--------------------------------------------------------------------------------|\n| none         |No fast-forward, jump, or skip restrictions                                    |\n| adsUnwatched | Restrict fast-forward, jump, and skip for unwatched ad opportunities only.     |\n| adsAll       | Restrict fast-forward, jump, and skip for all ad opportunities                 |\n| all          | Restrict fast-forward, jump, and skip for all ad opportunities and all content |\n\nNamespace: `xrn:advertising:policy:skipRestriction:`\n\n"
			},
			"AdConfigurationOptions": {
				"title": "AdConfigurationOptions",
				"type": "object",
				"properties": {
					"coppa": {
						"type": "boolean",
						"description": "Whether or not the app requires US COPPA compliance."
					},
					"environment": {
						"type": "string",
						"enum": [
							"prod",
							"test"
						],
						"default": "prod",
						"description": "Whether the app is running in a production or test mode."
					},
					"authenticationEntity": {
						"type": "string",
						"description": "The authentication provider, when it is separate entity than the app provider, e.g. an MVPD."
					}
				}
			},
			"TokenType": {
				"title": "TokenType",
				"type": "string",
				"enum": [
					"platform",
					"device",
					"distributor"
				]
			},
			"Resolution": {
				"type": "array",
				"items": [
					{
						"type": "integer"
					},
					{
						"type": "integer"
					}
				],
				"additionalItems": false,
				"minItems": 2,
				"maxItems": 2
			},
			"NetworkType": {
				"title": "NetworkType",
				"type": "string",
				"enum": [
					"wifi",
					"ethernet",
					"hybrid"
				],
				"description": "The type of network that is currently active"
			},
			"NetworkState": {
				"title": "NetworkState",
				"type": "string",
				"enum": [
					"connected",
					"disconnected"
				],
				"description": "The type of network that is currently active"
			},
			"AudioProfiles": {
				"title": "AudioProfiles",
				"allOf": [
					{
						"$ref": "#/components/schemas/BooleanMap"
					},
					{
						"type": "object",
						"propertyNames": {
							"$ref": "#/components/schemas/AudioProfile"
						}
					}
				]
			},
			"AudioProfile": {
				"title": "AudioProfile",
				"type": "string",
				"enum": [
					"stereo",
					"dolbyDigital5.1",
					"dolbyDigital7.1",
					"dolbyDigital5.1+",
					"dolbyDigital7.1+",
					"dolbyAtmos"
				]
			},
			"SemanticVersion": {
				"title": "SemanticVersion",
				"type": "object",
				"properties": {
					"major": {
						"type": "integer",
						"minimum": 0
					},
					"minor": {
						"type": "integer",
						"minimum": 0
					},
					"patch": {
						"type": "integer",
						"minimum": 0
					},
					"readable": {
						"type": "string"
					}
				},
				"required": [
					"major",
					"minor",
					"patch",
					"readable"
				],
				"additionalProperties": false
			},
			"BooleanMap": {
				"type": "object",
				"patternProperties": {
					"^.*$": {
						"type": "boolean"
					}
				}
			},
			"DiscoveryPolicy": {
				"title": "DiscoveryPolicy",
				"type": "object",
				"required": [
					"enableRecommendations",
					"shareWatchHistory",
					"rememberWatchedPrograms"
				],
				"properties": {
					"enableRecommendations": {
						"type": "boolean",
						"description": "Whether or not to the user has enabled history-based recommendations"
					},
					"shareWatchHistory": {
						"type": "boolean",
						"description": "Whether or not the user has enabled app watch history data to be shared with the platform"
					},
					"rememberWatchedPrograms": {
						"type": "boolean",
						"description": "Whether or not the user has enabled watch history"
					}
				}
			},
			"EntityInfo": {
				"title": "EntityInfo",
				"description": "An EntityInfo object represents an \"entity\" on the platform. Currently, only entities of type `program` are supported. `programType` must be supplied to identify the program type.\n\nAdditionally, EntityInfo objects must specify a properly formed\nContentIdentifiers object, `entityType`, and `title`.  The app should provide\nthe `synopsis` property for a good user experience if the content\nmetadata is not available another way.\n\nThe ContentIdentifiers must be sufficient for navigating the user to the\nappropriate entity or detail screen via a `detail` intent or deep link.\n\nEntityInfo objects must provide at least one WayToWatch object when returned as\npart of an `entityInfo` method and a streamable asset is available to the user.\nIt is optional for the `purchasedContent` method, but recommended because the UI\nmay use those data.",
				"type": "object",
				"required": [
					"identifiers",
					"entityType",
					"programType",
					"title"
				],
				"properties": {
					"identifiers": {
						"$ref": "#/components/schemas/ContentIdentifiers"
					},
					"title": {
						"type": "string",
						"description": "Title of the entity."
					},
					"entityType": {
						"const": "program",
						"description": "The type of the entity. If `program`, then `programType` must be provided."
					},
					"programType": {
						"$ref": "#/components/schemas/ProgramType"
					},
					"synopsis": {
						"type": "string",
						"description": "Short description of the entity."
					},
					"seasonNumber": {
						"type": "number",
						"description": "For TV seasons, the season number. For TV episodes, the season that the episode belongs to."
					},
					"episodeNumber": {
						"type": "number",
						"description": "For TV episodes, the episode number."
					},
					"releaseDate": {
						"type": "string",
						"format": "date-time",
						"description": "The date that the program or entity was released or first aired."
					},
					"contentRatings": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ContentRating"
						},
						"description": "A list of ContentRating objects, describing the entity's ratings in various rating schemes."
					},
					"waysToWatch": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/WayToWatch"
						},
						"description": "An array of ways a user is might watch this entity, regardless of entitlements."
					}
				}
			},
			"WayToWatch": {
				"title": "WayToWatch",
				"type": "object",
				"required": [
					"identifiers"
				],
				"properties": {
					"identifiers": {
						"$ref": "#/components/schemas/ContentIdentifiers"
					},
					"expires": {
						"type": "string",
						"format": "date-time",
						"description": "Time when the WayToWatch is no longer available."
					},
					"entitled": {
						"type": "boolean",
						"description": "Specify if the user is entitled to watch the entity."
					},
					"entitledExpires": {
						"type": "string",
						"format": "date-time",
						"description": "Time when the entity is no longer entitled."
					},
					"offeringType": {
						"$ref": "#/components/schemas/OfferingType"
					},
					"hasAds": {
						"type": "boolean",
						"description": "True if the streamable asset contains ads."
					},
					"price": {
						"type": "number",
						"description": "For \"buy\" and \"rent\" WayToWatch, the price to buy or rent in the user's preferred currency."
					},
					"videoQuality": {
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"SD",
								"HD",
								"UHD"
							]
						},
						"description": "List of the video qualities available via the WayToWatch."
					},
					"audioProfile": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AudioProfile"
						},
						"description": "List of the audio types available via the WayToWatch."
					},
					"audioLanguages": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "List of audio track languages available on the WayToWatch. The first is considered the primary language. Languages are expressed as ISO 639 1/2 codes."
					},
					"closedCaptions": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "List of languages for which closed captions are available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
					},
					"subtitles": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "List of languages for which subtitles are available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
					},
					"audioDescriptions": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "List of languages for which audio descriptions (DVS) are available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
					}
				},
				"description": "A WayToWatch describes a way to watch a video program. It may describe a single\nstreamable asset or a set of streamable assets. For example, an app provider may\ndescribe HD, SD, and UHD assets as individual WayToWatch objects or rolled into\na single WayToWatch.\n\nIf the WayToWatch represents a single streamable asset, the provided\nContentIdentifiers must be sufficient to play back the specific asset when sent\nvia a playback intent or deep link. If the WayToWatch represents multiple\nstreamable assets, the provided ContentIdentifiers must be sufficient to\nplayback one of the assets represented with no user action. In this scenario,\nthe app SHOULD choose the best asset for the user based on their device and\nsettings. The ContentIdentifiers MUST also be sufficient for navigating the user\nto the appropriate entity or detail screen via an entity intent.\n\nThe app should set the `entitled` property to indicate if the user can watch, or\nnot watch, the asset without making a purchase. If the entitlement is known to\nexpire at a certain time (e.g., a rental), the app should also provide the\n`entitledExpires` property. If the entitlement is not expired, the UI will use\nthe `entitled` property to display watchable assets to the user, adjust how\nassets are presented to the user, and how intents into the app are generated.\nFor example, the Aggregated Experience could render a \"Watch\" button for an\nentitled asset versus a \"Subscribe\" button for an non-entitled asset.\n\nThe app should set the `offeringType` to define how the content may be\nauthorized. The UI will use this to adjust how content is presented to the user.\n\nA single WayToWatch cannot represent streamable assets available via multiple\npurchase paths. If, for example, an asset has both Buy, Rent and Subscription\navailability, the three different entitlement paths MUST be represented as\nmultiple WayToWatch objects.\n\n`price` should be populated for WayToWatch objects with `buy` or `rent`\n`offeringType`. If the WayToWatch represents a set of assets with various price\npoints, the `price` provided must be the lowest available price."
			},
			"ContentRating": {
				"title": "ContentRating",
				"type": "object",
				"required": [
					"scheme",
					"rating"
				],
				"properties": {
					"scheme": {
						"type": "string",
						"enum": [
							"CA-Movie",
							"CA-TV",
							"CA-Movie-Fr",
							"CA-TV-Fr",
							"US-Movie",
							"US-TV"
						],
						"description": "The rating scheme."
					},
					"rating": {
						"type": "string",
						"description": "The content rating."
					},
					"advisories": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Optional list of subratings or content advisories."
					}
				},
				"description": "A ContentRating represents an age or content based of an entity. Supported rating schemes and associated types are below.\n\n## United States\n\n`US-Movie` (MPAA):\n\nRatings: `NR`, `G`, `PG`, `PG13`, `R`, `NC17`\n\nAdvisories: `AT`, `BN`, `SL`, `SS`, `N`, `V`\n\n`US-TV` (Vchip):\n\nRatings: `TVY`, `TVY7`, `TVG`, `TVPG`, `TV14`, `TVMA`\n\nAdvisories: `FV`, `D`, `L`, `S`, `V`\n\n## Canada\n\n`CA-Movie` (OFRB):\n\nRatings: `G`, `PG`, `14A`, `18A`, `R`, `E`\n\n`CA-TV` (AGVOT)\n\nRatings: `E`, `C`, `C8`, `G`, `PG`, `14+`, `18+`\n\nAdvisories: `C`, `C8`, `G`, `PG`, `14+`, `18+`\n\n`CA-Movie-Fr` (Canadian French language movies):\n\nRatings: `G`, `8+`, `13+`, `16+`, `18+`\n\n`CA-TV-Fr` (Canadian French language TV):\n\nRatings: `G`, `8+`, `13+`, `16+`, `18+`\n"
			},
			"ContentIdentifiers": {
				"title": "ContentIdentifiers",
				"type": "object",
				"properties": {
					"assetId": {
						"type": "string",
						"description": "Identifies a particular playable asset. For example, the HD version of a particular movie separate from the UHD version."
					},
					"entityId": {
						"type": "string",
						"description": "Identifies an entity, such as a Movie, TV Series or TV Episode."
					},
					"seasonId": {
						"type": "string",
						"description": "The TV Season for a TV Episode."
					},
					"seriesId": {
						"type": "string",
						"description": "The TV Series for a TV Episode or TV Season."
					},
					"appContentData": {
						"type": "string",
						"description": "App-specific content identifiers.",
						"maxLength": 1024
					}
				},
				"description": "The ContentIdentifiers object is how the app identifies an entity or asset to\nthe Firebolt platform. These ids are used to look up metadata and deep link into\nthe app.\n\nApps do not need to provide all ids. They only need to provide the minimum\nrequired to target a playable stream or an entity detail screen via a deep link.\nIf an id isn't needed to get to those pages, it doesn't need to be included."
			},
			"FederatedRequest": {
				"title": "FederatedRequest",
				"type": "object",
				"properties": {
					"correlationId": {
						"type": "string"
					}
				},
				"required": [
					"correlationId"
				],
				"propertyNames": {
					"enum": [
						"correlationId",
						"parameters"
					]
				},
				"examples": [
					{
						"correlationId": "xyz"
					}
				]
			},
			"FederatedResponse": {
				"title": "FederatedResponse",
				"type": "object",
				"properties": {
					"correlationId": {
						"type": "string"
					}
				},
				"required": [
					"correlationId",
					"result"
				],
				"propertyNames": {
					"enum": [
						"correlationId",
						"result"
					]
				},
				"examples": [
					{
						"correlationId": "xyz"
					}
				]
			},
			"EntityInfoFederatedRequest": {
				"title": "EntityInfoFederatedRequest",
				"allOf": [
					{
						"$ref": "#/components/schemas/FederatedRequest"
					},
					{
						"type": "object",
						"properties": {
							"parameters": {
								"$ref": "#/components/schemas/EntityInfoParameters"
							}
						},
						"required": [
							"correlationId",
							"parameters"
						]
					}
				],
				"examples": [
					{
						"correlationId": "xyz",
						"parameters": {
							"entityId": "345"
						}
					}
				]
			},
			"EntityInfoParameters": {
				"title": "EntityInfoParameters",
				"type": "object",
				"properties": {
					"entityId": {
						"type": "string"
					},
					"assetId": {
						"type": "string"
					}
				},
				"required": [
					"entityId"
				],
				"additionalProperties": false,
				"examples": [
					{
						"entityId": "345"
					}
				]
			},
			"EntityInfoFederatedResponse": {
				"title": "EntityInfoFederatedResponse",
				"allOf": [
					{
						"$ref": "#/components/schemas/FederatedResponse"
					},
					{
						"type": "object",
						"properties": {
							"result": {
								"$ref": "#/components/schemas/EntityInfoResult"
							}
						}
					}
				]
			},
			"EntityInfoResult": {
				"title": "EntityInfoResult",
				"description": "The result for an `entityInfo()` push or pull.",
				"type": "object",
				"properties": {
					"expires": {
						"type": "string",
						"format": "date-time"
					},
					"entity": {
						"$ref": "#/components/schemas/EntityInfo"
					},
					"related": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/EntityInfo"
						}
					}
				},
				"required": [
					"expires",
					"entity"
				],
				"additionalProperties": false
			},
			"PurchasedContentFederatedRequest": {
				"title": "PurchasedContentFederatedRequest",
				"allOf": [
					{
						"$ref": "#/components/schemas/FederatedRequest"
					},
					{
						"type": "object",
						"properties": {
							"parameters": {
								"$ref": "#/components/schemas/PurchasedContentParameters"
							}
						},
						"required": [
							"correlationId",
							"parameters"
						]
					}
				],
				"examples": [
					{
						"correlationId": "xyz",
						"parameters": {
							"limit": 100
						}
					}
				]
			},
			"PurchasedContentParameters": {
				"title": "PurchasedContentParameters",
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"minimum": -1
					},
					"offeringType": {
						"$ref": "#/components/schemas/OfferingType"
					},
					"programType": {
						"$ref": "#/components/schemas/ProgramType"
					}
				},
				"required": [
					"limit"
				],
				"additionalProperties": false,
				"examples": [
					{
						"limit": 100
					}
				]
			},
			"PurchasedContentFederatedResponse": {
				"title": "PurchasedContentFederatedResponse",
				"allOf": [
					{
						"$ref": "#/components/schemas/FederatedResponse"
					},
					{
						"type": "object",
						"properties": {
							"result": {
								"$ref": "#/components/schemas/PurchasedContentResult"
							}
						}
					}
				]
			},
			"PurchasedContentResult": {
				"title": "PurchasedContentResult",
				"type": "object",
				"properties": {
					"expires": {
						"type": "string",
						"format": "date-time"
					},
					"totalCount": {
						"type": "integer",
						"minimum": 0
					},
					"entries": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/EntityInfo"
						}
					}
				},
				"required": [
					"expires",
					"totalCount",
					"entries"
				],
				"additionalProperties": false
			},
			"LocalizedString": {
				"title": "LocalizedString",
				"description": "Localized string supports either a simple `string` or a Map<string, string> of language codes to strings. When using a simple `string`, the current preferred langauge from `Localization.langauge()` is assumed.",
				"oneOf": [
					{
						"type": "string"
					},
					{
						"type": "object",
						"patternProperties": {
							".*": {
								"type": "string"
							}
						}
					}
				],
				"examples": [
					"A simple string, with no language code",
					{
						"en": "This is english",
						"es": "esto es español"
					}
				]
			},
			"Entitlement": {
				"title": "Entitlement",
				"type": "object",
				"properties": {
					"entitlementId": {
						"type": "string"
					},
					"startTime": {
						"type": "string",
						"format": "date-time"
					},
					"endTime": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"entitlementId"
				]
			},
			"NavigationIntent": {
				"title": "NavigationIntent",
				"description": "A Firebolt compliant representation of a user intention to navigate to a specific place in an app.",
				"anyOf": [
					{
						"$ref": "#/components/schemas/HomeIntent"
					},
					{
						"$ref": "#/components/schemas/LaunchIntent"
					},
					{
						"$ref": "#/components/schemas/EntityIntent"
					},
					{
						"$ref": "#/components/schemas/PlayerIntent"
					},
					{
						"$ref": "#/components/schemas/SearchIntent"
					},
					{
						"$ref": "#/components/schemas/SectionIntent"
					}
				]
			},
			"ProgramType": {
				"title": "ProgramType",
				"type": "string",
				"description": "In the case of a program `entityType`, specifies the program type.",
				"enum": [
					"movie",
					"episode",
					"season",
					"series",
					"other",
					"preview",
					"extra",
					"concert",
					"sportingEvent",
					"advertisement",
					"musicVideo",
					"minisode"
				]
			},
			"OfferingType": {
				"title": "OfferingType",
				"type": "string",
				"enum": [
					"free",
					"subscribe",
					"buy",
					"rent"
				],
				"description": "The offering type of the WayToWatch."
			},
			"HomeIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to it's home screen, and bring that app to the foreground if needed.",
				"title": "HomeIntent",
				"allOf": [
					{
						"title": "HomeIntent",
						"$ref": "#/components/schemas/Intent"
					},
					{
						"title": "HomeIntent",
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"title": "HomeIntent",
						"type": "object",
						"properties": {
							"action": {
								"const": "home"
							}
						}
					}
				],
				"examples": [
					{
						"action": "home",
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"LaunchIntent": {
				"description": "A Firebolt compliant representation of a user intention to launch an app.",
				"title": "LaunchIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"properties": {
							"action": {
								"const": "launch"
							}
						}
					}
				],
				"examples": [
					{
						"action": "launch",
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"EntityIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to a specific entity page, and bring that app to the foreground if needed.",
				"title": "EntityIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"required": [
							"data"
						],
						"properties": {
							"action": {
								"const": "entity"
							},
							"data": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/MovieEntity"
									},
									{
										"$ref": "#/components/schemas/TVEpisodeEntity"
									},
									{
										"$ref": "#/components/schemas/TVSeriesEntity"
									},
									{
										"$ref": "#/components/schemas/TVSeasonEntity"
									},
									{
										"$ref": "#/components/schemas/AdditionalEntity"
									},
									{
										"$ref": "#/components/schemas/UntypedEntity"
									}
								]
							}
						}
					}
				],
				"examples": [
					{
						"action": "entity",
						"context": {
							"source": "voice"
						},
						"data": {
							"entityType": "program",
							"programType": "movie",
							"entityId": "el-camino"
						}
					}
				]
			},
			"PlayerIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for a specific, playable entity, and bring that app to the foreground if needed.",
				"title": "PlayerIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"required": [
							"data"
						],
						"properties": {
							"action": {
								"const": "playback"
							},
							"data": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/MovieEntity"
									},
									{
										"$ref": "#/components/schemas/TVEpisodeEntity"
									},
									{
										"$ref": "#/components/schemas/AdditionalEntity"
									}
								]
							}
						}
					}
				],
				"examples": [
					{
						"action": "playback",
						"data": {
							"entityType": "program",
							"programType": "episode",
							"entityId": "breaking-bad-pilot",
							"seriesId": "breaking-bad",
							"seasonId": "breaking-bad-season-1"
						},
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"SearchIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to it's search UI with a search term populated, and bring that app to the foreground if needed.",
				"title": "SearchIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"properties": {
							"action": {
								"const": "search"
							},
							"data": {
								"type": "object",
								"required": [
									"query"
								],
								"properties": {
									"query": {
										"type": "string"
									}
								},
								"additionalProperties": false
							}
						}
					}
				],
				"examples": [
					{
						"action": "search",
						"data": {
							"query": "walter white"
						},
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"SectionIntent": {
				"description": "A Firebolt compliant representation of a user intention to navigate an app to a section not covered by `home`, `entity`, `player`, or `search`, and bring that app to the foreground if needed.",
				"title": "SectionIntent",
				"allOf": [
					{
						"$ref": "#/components/schemas/Intent"
					},
					{
						"$ref": "#/components/schemas/IntentProperties"
					},
					{
						"type": "object",
						"properties": {
							"action": {
								"const": "section"
							},
							"data": {
								"type": "object",
								"required": [
									"sectionName"
								],
								"properties": {
									"sectionName": {
										"type": "string"
									}
								},
								"additionalProperties": false
							}
						}
					}
				],
				"examples": [
					{
						"action": "section",
						"data": {
							"sectionName": "settings"
						},
						"context": {
							"source": "voice"
						}
					}
				]
			},
			"Intent": {
				"description": "A Firebolt compliant representation of a user intention.",
				"type": "object",
				"required": [
					"action",
					"context"
				],
				"properties": {
					"action": {
						"type": "string"
					},
					"context": {
						"type": "object",
						"required": [
							"source"
						],
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"voice",
									"editorial",
									"device"
								]
							}
						}
					}
				}
			},
			"IntentProperties": {
				"type": "object",
				"propertyNames": {
					"enum": [
						"action",
						"data",
						"context"
					]
				}
			},
			"MovieEntity": {
				"title": "MovieEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of a Movie entity.",
						"title": "MovieEntity",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "movie"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "movie",
						"entityId": "el-camino"
					}
				]
			},
			"TVEpisodeEntity": {
				"title": "TVEpisodeEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of a TV Episode entity.",
						"title": "TVEpisodeEntity",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId",
							"seasonId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "episode"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"seriesId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"seasonId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "episode",
						"entityId": "breaking-bad-pilot",
						"seriesId": "breaking-bad",
						"seasonId": "breaking-bad-season-1"
					}
				]
			},
			"TVSeriesEntity": {
				"title": "TVSeriesEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of a TV Series entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "series"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "series",
						"entityId": "breaking-bad"
					}
				]
			},
			"TVSeasonEntity": {
				"title": "TVSeasonEntity",
				"description": "A Firebolt compliant representation of a TV Season entity.",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "season"
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"seriesId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "season",
						"entityId": "breaking-bad-season-1",
						"seriesId": "breaking-bad"
					}
				]
			},
			"AdditionalEntity": {
				"title": "AdditionalEntity",
				"allOf": [
					{
						"$ref": "#/components/schemas/ProgramEntity"
					},
					{
						"description": "A Firebolt compliant representation of the remaining entity types.",
						"type": "object",
						"required": [
							"entityType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"type": "string",
								"enum": [
									"concert",
									"sportingEvent",
									"preview",
									"other",
									"advertisement",
									"musicVideo",
									"minisode",
									"extra"
								]
							},
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityType": "program",
						"programType": "concert",
						"entityId": "live-aid"
					}
				]
			},
			"UntypedEntity": {
				"title": "UntypedEntity",
				"allOf": [
					{
						"description": "A Firebolt compliant representation of the remaining entity types.",
						"type": "object",
						"required": [
							"entityId"
						],
						"properties": {
							"entityId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"assetId": {
								"$ref": "#/components/schemas/Identifier"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false
					}
				],
				"examples": [
					{
						"entityId": "an-entity"
					}
				]
			},
			"ProgramEntity": {
				"title": "ProgramEntity",
				"type": "object",
				"properties": {
					"entityType": {
						"const": "program"
					},
					"programType": {
						"$ref": "#/components/schemas/ProgramType"
					},
					"entityId": {
						"type": "string"
					}
				},
				"required": [
					"entityType",
					"programType",
					"entityId"
				]
			},
			"Identifier": {
				"type": "string"
			},
			"EmailUsage": {
				"title": "EmailUsage",
				"type": "string",
				"enum": [
					"signIn",
					"signUp"
				]
			},
			"LifecycleEvent": {
				"title": "LifecycleEvent",
				"description": "A an object describing the previous and current states",
				"type": "object",
				"required": [
					"state",
					"previous"
				],
				"properties": {
					"state": {
						"$ref": "#/components/schemas/LifecycleState",
						"description": "The current lifcycle state"
					},
					"previous": {
						"$ref": "#/components/schemas/LifecycleState",
						"description": "The previous lifcycle state"
					},
					"source": {
						"type": "string",
						"enum": [
							"voice",
							"remote"
						],
						"description": "The source of the lifecycle change."
					}
				}
			},
			"LifecycleState": {
				"title": "LifecycleState",
				"description": "Valid states in the `Lifecycle` API",
				"type": "string",
				"enum": [
					"initializing",
					"inactive",
					"background",
					"foreground",
					"suspended",
					"unloading"
				]
			},
			"CloseReason": {
				"title": "CloseReason",
				"description": "Reasons for calling the `close` method",
				"type": "string",
				"enum": [
					"remoteButton",
					"userExit",
					"error"
				]
			},
			"LatLon": {
				"type": "array",
				"items": [
					{
						"type": "number"
					},
					{
						"type": "number"
					}
				],
				"additionalItems": false,
				"minItems": 2,
				"maxItems": 2
			},
			"MediaPosition": {
				"title": "MediaPosition",
				"description": "Represents a position inside playback content, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
				"oneOf": [
					{
						"const": 0
					},
					{
						"type": "number",
						"exclusiveMinimum": 0,
						"exclusiveMaximum": 1
					},
					{
						"type": "integer",
						"minimum": 1,
						"maximum": 86400
					}
				]
			},
			"ErrorType": {
				"title": "ErrorType",
				"type": "string",
				"enum": [
					"network",
					"media",
					"restriction",
					"entitlement",
					"other"
				]
			},
			"FlatMap": {
				"type": "object",
				"patternProperties": {
					"^.*$": {
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "number"
							},
							{
								"type": "boolean"
							}
						]
					}
				}
			},
			"AppInitialization": {
				"title": "AppInitialization",
				"type": "object",
				"properties": {
					"us_privacy": {
						"type": "string",
						"description": "The IAB US Privacy string."
					},
					"lmt": {
						"type": "integer",
						"description": "The IAB limit ad tracking opt out value."
					},
					"discovery": {
						"type": "object",
						"properties": {
							"navigateTo": {
								"$ref": "#/components/schemas/NavigationIntent"
							}
						}
					},
					"secondScreen": {
						"type": "object",
						"properties": {
							"launchRequest": {
								"$ref": "#/components/schemas/SecondScreenEvent"
							}
						}
					}
				}
			},
			"SecondScreenEvent": {
				"title": "SecondScreenEvent",
				"description": "An a message notification from a second screen device",
				"type": "object",
				"required": [
					"type"
				],
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"dial"
						]
					},
					"version": {
						"type": "string"
					},
					"data": {
						"type": "string"
					}
				}
			}
		}
	}
}